<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    ">

	<!-- package kopo로 변경해주면 해당 패키지를 읽어온다? -->
	<context:component-scan
		base-package="kr.ac.kopo" />

	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html; charset=UTF-8</value>
						<value>application/json; charset=UTF-8</value>
					</list>
				</property>

			</bean>
			<bean
				class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html; charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521:XE" />
<!-- 		<property name="url"
			value="jdbc:oracle:thin:@34.64.102.242:1521:XE" /> -->
		<property name="username" value="system" />
		<property name="password" value="1234" />
	</bean>

	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:config/mybatis/sqlMapConfig.xml" />
		<property name="mapperLocations"
			value="classpath:config/sqlmap/oracle/*.xml" />
	</bean>

	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver">
		<property name="maxUploadSize" value="10485760" />
	</bean>


	<!-- forword 없이 리턴하는 것 -->
	<mvc:view-controller path="/file/uploadForm.do"
		view-name="file/fileUploadForm" />

	<!-- 어노테이션 기법 사용 설정 -->
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<!-- 요청은 서블릿이 받고 응답은 jsp로 준다. -->
	<mvc:view-resolvers>
		<mvc:jsp prefix="/WEB-INF/jsp/" suffix=".jsp" />
	</mvc:view-resolvers>


	<!-- 인터셉터 설정 -->
	<bean class="kr.ac.kopo.interceptor.LoginInterceptor"
		id="loginInterceptor" />
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/" /> 	<!-- / 다음으로 들어오는 모든 경로 의미 / 와일드카드(*) 사용하면 하위 depth는 모두 인터셉터를 거친다. -->
			<mvc:exclude-mapping path="/login" />
			<mvc:exclude-mapping path="/logout" />
			<mvc:exclude-mapping path="/signUp" />
			<mvc:exclude-mapping path="/resources/**" /> <!-- **와 * 차이? -->
			<ref bean="loginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>


	<!-- 트랜젝션 처리 -->
	<bean
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		id="transactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven
		transaction-manager="transactionManager" />
		

	<!-- /////////////////////////// -->
	<!-- 시간 간격 설정 
	0/1 * * * * ?		매 1초 간격
	0 0/1 * * * ?		매 1분 간격
	0 * * * * ?			매 1분 간격
	0 0 0/1 * * ?		매 1시간 간격
	0 0 0 * * ?			매일 0시 마다
	0 0 0 1 * ?			매월 1일 마다
	0 0 0 1,10,20 * ?	매월 1일, 10일, 20일 마다
	-->
	
	<!-- 자동이체 쿼츠 잡 -->
	<bean id="testJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<property name="targetObject" ref="autoDebitExecute" /> 
		<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
		<property name="targetMethod" value="autoDebitExecute" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="false" />
	</bean>
	
	<!-- 일반 자동이체용 쿼츠 -->
	<bean id="testJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="testJob" />
		<!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
		<!-- <property name="cronExpression" value="0/30 * * * * ?" /> -->
		<property name="cronExpression" value="0 0 8 * * ?" />
	</bean>
	
	<!-- 테스트용 스케줄러 -->
	<bean id="testJobScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
			<list>
				<ref bean="testJobTrigger" />
			</list>
		</property>
	</bean>

	<!-- ================================================================================= -->
	<!-- 자동이동 쿼츠 잡 -->
	<bean id="onepickJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<property name="targetObject" ref="scheduleExecute" /> 
		<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
		<property name="targetMethod" value="scheduleExecute" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="false" />
	</bean>
	
	<!-- 일반 자동이체용 쿼츠 -->
	<bean id="testJobTrigger2"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="onepickJob" />
		<property name="cronExpression" value="0 0 0 1 * ?" />
	</bean>
	
	<!-- 테스트용 스케줄러 -->
	<bean id="testJobScheduler2"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
			<list>
				<ref bean="testJobTrigger2" />
			</list>
		</property>
	</bean>

	<!-- ================================================================================= -->
	<!-- 데일리 금융리포트 쿼츠 잡 -->
	<!-- <bean id="dailyReport"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		서비스 구현 객체의 빈 이름을 인자로 줍니다.
		<property name="targetObject" ref="dailyReportExecute" /> 
		서비스 객체에서 주기적으로 실행될 메소드른 지정합니다.
		<property name="targetMethod" value="dailyReportExecute" />
		동시 실행을 방지합니다.
		<property name="concurrent" value="false" />
	</bean>
	
	데일리 금융리포트용 쿼츠
	<bean id="testJobTrigger3"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="dailyReport" />
		<property name="cronExpression" value="0 0 8 * * ?" />
	</bean>
	
	테스트용 스케줄러
	<bean id="testJobScheduler3"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다.
			<list>
				<ref bean="testJobTrigger3" />
			</list>
		</property>
	</bean> -->
	
	
	<!-- ================================================================================= -->
	<!-- 월간 금융리포트 쿼츠 잡 -->
	<!-- <bean id="monthlyReport"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		서비스 구현 객체의 빈 이름을 인자로 줍니다.
		<property name="targetObject" ref="monthlyReportExecute" /> 
		서비스 객체에서 주기적으로 실행될 메소드른 지정합니다.
		<property name="targetMethod" value="monthlyReportExecute" />
		동시 실행을 방지합니다.
		<property name="concurrent" value="false" />
	</bean>
	
	월간 금융리포트용 쿼츠
	<bean id="testJobTrigger4"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="monthlyReport" />
		<property name="cronExpression" value="0 0 0 1 * ?" />
	</bean>

	테스트용 스케줄러
	<bean id="testJobScheduler4"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다.
			<list>
				<ref bean="testJobTrigger4" />
			</list>
		</property>
	</bean> -->
	
<!-- 	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="hongtaek92@gmail.com" />
		<property name="password" value="" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean> -->

	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.naver.com" />
		<property name="port" value="465" />
		<property name="username" value="mischief05" />
		<property name="password" value="hohyta1132" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.debug">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtps.ssl.checkserveridentity">true</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtps.ssl.trust">*</prop>
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
			</props>
		</property>
	</bean>

	<!-- this is a template message that we can pre-load with default state -->
	<bean id="templateMessage"
		class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="mischief05@naver.com" />
		<property name="subject" value="Your order" />
	</bean>

	
	

</beans>