<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="banking.dao.BankingDAO">

	<resultMap type="transactionVO" id="transactionMap">
		<result column="trans_date" property="transDate" />
		<result column="opp_acc_no" property="oppAccNo" />
		<result column="acc_no" property="accNo" />
	</resultMap>

	<resultMap type="autoDebitVO" id="autoDebitMap">
		<result column="acc_no" property="accNo" />
		<result column="set_money" property="setMoney" />
		<result column="start_date" property="startDate" />
		<result column="end_date" property="endDate" />
		<result column="opp_acc_no" property="oppAccNo" />
		<result column="set_date" property="setDate" />
		<result column="autodebit_code" property="autodebitCode" />
		<result column="last_run_date" property="lastRunDate" />
		<result column="close_date" property="closeDate" />
		<result column="autodebit_code" property="autodebitCode" />
	</resultMap>
	
	<!-- 계좌 조회 -->
	<select id="checkAccNo" parameterType="bankingVO" resultType="int">
		select count(*)
		from account
		where acc_no = #{ accNo } and acc_pwd = #{ accPwd }
	</select>
	
	<!-- 출금 가능여부 체크 -->
	<select id="chkBalance" parameterType="bankingVO" resultType="accountVO">
		select balance, balance - #{ money } as chkBalance, acc_name as accName
		from account
		where acc_no = #{ accNo } and acc_pwd = #{ accPwd }
	</select>
	
	<!-- 상대방 계좌 체크 -->
	<select id="chkOppAccNo" parameterType="bankingVO" resultType="int">
		select count(*)
		from account
		where acc_no = #{ oppAccNo } and bank_name = #{ bankName }
	</select>

	<!-- 이체(출금계좌) -->
	<update id="withdraw" parameterType="bankingVO">
		update account 
		set balance = balance - #{ money }
		where acc_no = #{ accNo }
	</update>

	<!-- 이체(입금계좌) -->
	<update id="deposit" parameterType="bankingVO">
		update account
		set balance = balance + #{ money }
		where acc_no = #{ oppAccNo }
	</update>
	
	
	<!-- 거래내역 조회 -->
	<select id="transHistory" resultMap="transactionMap" parameterType="TransactionVO">
		select acc_no, trans_date, summary, memo, withdraw,
		deposit, balance, opp_acc_no
		from transaction
		where acc_no = #{ accNo }
		and trans_date between #{ startDate } and #{ endDate }

		<trim prefix="order by" suffix="" prefixOverrides=" " suffixOverrides=",">
			<if test="searchSort == 'asc' ">
				trans_date asc
			</if>
			<if test="searchSort == 'desc' ">
				trans_date desc
			</if>
		</trim>
	</select>

	<!-- 거래내역 합계 -->
	<select id="transSum" resultMap="transactionMap"
		parameterType="TransactionVO">
		select sum(withdraw) as withSum, sum(deposit) as depoSum
		from transaction
		where acc_no = #{ accNo }
	</select>
	

	<!-- 거래내역 로그(출금 거래내역) -->
	<insert id="sendTransaction" parameterType="bankingVO">
		insert into transaction(acc_no, trans_code, summary, memo, withdraw, balance, opp_acc_no)
		values( #{ accNo }, seq_trans_code.nextval, #{ summary }, #{ memo }, #{ money }, 
		(select balance from account where acc_no = #{ accNo }), #{ oppAccNo } )		
	</insert>


	<!-- 거래내역 로그(입금 거래내역) -->
	<insert id="receiveTransaction" parameterType="bankingVO">
		insert into transaction(acc_no, trans_code, summary, memo, deposit, balance, opp_acc_no)
		values( #{ oppAccNo }, seq_trans_code.nextval, #{ summary }, #{ memo }, #{ money }, 
		(select balance from account where acc_no = #{ oppAccNo }), #{ accNo } )
	</insert>
	
</mapper>



